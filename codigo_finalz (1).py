# -*- coding: utf-8 -*-
"""CODIGO FINALz

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WJfPOWqWhgGMc2JQ6X5lfZi6HcMOW2Ed
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import gdown
import os

#Título
st.title('Casos Positivos de Covid-19 en el Perú')
st.subheader("Miembros del equipo")
st.markdown("""
- Elmer Taipe
- Miguel Sanchez
- Jefferson Buiza
- Nelson Huamani
""")
st.markdown("""
---
La información contenida en esta página web permite acceder al Dataset “Casos positivos por COVID-19”
elaborado por el Ministerio de Salud (MINSA) del Perú. Este ha registrado el monitoreo diario de los
casos positivos de covid-19 confirmados con cualquier tipo de prueba hasta el día 23 de mayo de 2022.
Cada registro es equivalente a una persona, así como su sexo, edad y distintos niveles de ubicación geográfica:
departamento, provincia y distrito.

Fuente de datos: (https://www.datosabiertos.gob.pe/dataset/casos-positivos-por-covid-19-ministerio-de-salud-minsa)

---
""")
st.markdown("""
Para poder visualizar la información de una zona geográfica en específico del Perú, seleccione el nombre de un departamento, provincia y distrito.
""")

#Lectura de datos desde CSV
if not os.path.exists('downloads'):
  os.makedirs('downloads')

@st.experimental_memo
def download_data():
  url = "https://drive.google.com/uc?id=1op-iq0XhBXBQOPlagCPE9TzFsFkkNVjQ"
  output = "downloads/data.csv"
  gdown.download(url, output, quiet=False)

download_data()
df = pd.read_csv("downloads/data.csv", sep=";", parse_dates=["FECHA_CORTE", "FECHA_RESULTADO"])
df = df.drop(columns=["FECHA_CORTE", "FECHA_RESULTADO", "UBIGEO", "id_persona"])

#Sistema de filtros

#Construcción del set/list de departamentos (Valores únicos sin NA)
set_departamentos = np.sort(df['DEPARTAMENTO'].dropna().unique())
#Selección del departamento
opcion_departamento = st.selectbox('Selecciona un departamento', set_departamentos)
df_departamentos = df[df['DEPARTAMENTO'] == opcion_departamento]
num_filas = len(df_departamentos.axes[0])

#Construcción del set/list de provincias (Valores únicos sin NA)
set_provincias = np.sort(df_departamentos['PROVINCIA'].dropna().unique())
#Selección de la provincia
opcion_provincia = st.selectbox('Selecciona una provincia', set_provincias)
df_provincias = df_departamentos[df_departamentos['PROVINCIA'] == opcion_provincia]
num_filas = len(df_provincias.axes[0])

#Construcción del set/list de distritos (Valores únicos sin NA)
set_distritos = np.sort(df_departamentos['DISTRITO'].dropna().unique())
#Selección de la distrito
opcion_distrito = st.selectbox('Selecciona un distrito', set_distritos)
df_distritos = df_departamentos[df_departamentos['DISTRITO'] == opcion_distrito]
num_filas = len(df_distritos.axes[0])

st.write('Numero de registros:', num_filas)

# Gráficas

# Gráfica de pie de METODODX
df_metododx = df_distritos.METODODX.value_counts().reset_index()
df_metododx.columns = ['METODODX', 'Total']

fig1 = px.pie(df_metododx, values='Total', names='METODODX', title='Distribución por METODODX')
st.plotly_chart(fig1)

# Gráfica de barras de SEXO
df_SEXO = df_distritos.SEXO.value_counts().reset_index()
df_SEXO.columns = ['SEXO', 'Total']

fig2 = px.bar(df_SEXO, x='SEXO', y='Total', title='Distribución por SEXO')
st.plotly_chart(fig2)

# Gráfica de barras de EDAD
df_edad = df_distritos.EDAD.value_counts().reset_index()
df_edad.columns = ['EDAD', 'Total']

fig3 = px.bar(df_edad, x='EDAD', y='Total', title='Distribución por EDAD')
st.plotly_chart(fig3)